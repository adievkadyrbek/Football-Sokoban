import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;

public class Model {

    private Viewer viewer;
    int [][] desktop;
    private int indexJ;
    private int indexI;
    private boolean startDesktop; 
    private int[][] arrayOfFours;
    private int nextLevel = 1;

    public Model(Viewer viewer) {
	this.viewer = viewer;
	desktopCreation("levels/level1.auca");
	desktopInit();
	JOptionPane.showMessageDialog(new JFrame(), "In order to win this game you (Messi) have to score\ngoals to David de Gea by avoiding the defender (Marcelo).\nGood luck!");
    }                        

    public void move(String direction) {

	if(direction.equals("Left")) {
		moveLeft();
	} else if(direction.equals("Up")) {
		moveUp();
	} else if(direction.equals("Right")) {
		moveRight();
	} else if(direction.equals("Down")) {
		moveDown();
	}
	checkGoalie();
	viewer.updateCanvas();
	levelWon();

    }

    private void moveLeft() {
	if(desktop[indexI][indexJ - 1] == 3 
	    && (desktop[indexI][indexJ - 2] == 4 
	    || desktop[indexI][indexJ - 2] == 0)) {
		desktop[indexI][indexJ - 1] = 0;
		desktop[indexI][indexJ - 2] = 3;
        } 
	if(desktop[indexI][indexJ - 1] == 0 
	    || desktop[indexI][indexJ - 1] == 4) {
		desktop[indexI][indexJ] = 0;
		indexJ -= 1;
		desktop[indexI][indexJ] = 1;	
	}
    }

    private void moveUp() {
	if(desktop[indexI - 1][indexJ] == 3 
	    && (desktop[indexI - 2][indexJ] == 4 
	    || desktop[indexI - 2][indexJ] == 0)) {
		desktop[indexI - 1][indexJ] = 0;
		desktop[indexI - 2][indexJ] = 3;
        } 
	if(desktop[indexI - 1][indexJ] == 0 
	    || desktop[indexI - 1][indexJ] == 4) {
		desktop[indexI][indexJ] = 0;
		indexI -= 1;
		desktop[indexI][indexJ] = 1;	
	}
    }

    private void moveRight() {
	if(desktop[indexI][indexJ + 1] == 3 
	    && (desktop[indexI][indexJ + 2] == 4 
	    || desktop[indexI][indexJ + 2] == 0)) {
		desktop[indexI][indexJ + 1] = 0;
		desktop[indexI][indexJ + 2] = 3;
        } 
	if(desktop[indexI][indexJ + 1] == 0 
	    || desktop[indexI][indexJ + 1] == 4) {
		desktop[indexI][indexJ] = 0;
		indexJ += 1;
		desktop[indexI][indexJ] = 1;	
	}
    }

    private void moveDown() {
	if(desktop[indexI + 1][indexJ] == 3 
	    && (desktop[indexI + 2][indexJ] == 4 
	    || desktop[indexI + 2][indexJ] == 0)) {
		desktop[indexI + 1][indexJ] = 0;
		desktop[indexI + 2][indexJ] = 3;
        } 
	if(desktop[indexI + 1][indexJ] == 0 
	    || desktop[indexI + 1][indexJ] == 4) {
		desktop[indexI][indexJ] = 0;
		indexI += 1;
		desktop[indexI][indexJ] = 1;	
	}
    }

    private void desktopInit() {
    	startDesktop = false;
	int countOfOnes = 0;
	int countOfThrees = 0;
       	int countOfFours = 0;

	for(int i = 0; i < desktop.length; i++) {
		for(int j = 0; j < desktop[i].length; j++) {
			if(desktop[i][j] == 1) {
				countOfOnes++;
				indexI = i;
				indexJ = j;
			}
			if(desktop[i][j] == 4) {
				countOfFours++;
			}
			if(desktop[i][j] == 3) {
				countOfThrees++;
		        }
		}		
	}
	
	if(countOfOnes == 1) {
		startDesktop = true;
	}
	if((countOfThrees != countOfFours) || ((countOfThrees == 0) & (countOfFours == 0))) {
		startDesktop = false;
	}
	
	arrayOfFours = new int [2][countOfFours];
	int t = 0;
	for(int i = 0; i < desktop.length; i++) {
		for(int j = 0; j < desktop[i].length; j++) {
			if(desktop[i][j] == 4) {
				arrayOfFours[0][t] = i;
				arrayOfFours[1][t] = j;
				t++;
			}			
		}
	}
    }
    
    private void checkGoalie() {
    	for(int j = 0; j < arrayOfFours[0].length; j++) {
    		int i1 = arrayOfFours[0][j];
    		int j1 = arrayOfFours[1][j];
		if(desktop[i1][j1] == 0) {
			desktop[i1][j1] = 4;
		}
	}                                                   
    }
         
    private void levelWon() {
	boolean flag = true;
	for(int j = 0; j < arrayOfFours[0].length; j++) {
		int x = arrayOfFours[0][j];
		int y = arrayOfFours[1][j];
		if(desktop[x][y] != 3) {
			flag = false;
		}
	}
	if(flag) {
		JOptionPane.showMessageDialog(new JFrame(), "Congratulations!\nYou won this level!");
		nextLevel();
		desktopInit();
		viewer.updateCanvas();
	}    	
    }

    private int[][] nextLevel() {
    	int[][] desktop = null;
	switch(nextLevel) {
		case 1:
			desktop = desktopCreation("levels/level2.auca");
			break;
		case 2:
			desktop = desktopCreation("levels/level3.auca");
			break;
		default:
			desktop = desktopCreation("levels/level3.auca");
			break;
	}
	nextLevel++;
	return desktop;
    }

    private int[][] desktopCreation(String fileName) {
    	String textFromLevelFile = openFile(fileName);
	int row = 0;
	for(int i = 0; i < textFromLevelFile.length(); i++) {
		char symbol = textFromLevelFile.charAt(i);
		if(symbol == '\n') {
			row++;
		} 
	}
	
	desktop = new int[row][];
	int column = 0;
	int indexI = 0;
	for(int i = 0; i < textFromLevelFile.length(); i++) {
		char symbol = textFromLevelFile.charAt(i);
		if(symbol == '\n') {
			desktop[indexI] = new int[column];
			column = 0;
			indexI++;
		} else {
			if('0' <= symbol & symbol <= '9') {
				column++;
			}
		}		
	}

	int x = 0;
	int y = 0;
	for(int i = 0; i < textFromLevelFile.length(); i++) {
		char symbol = textFromLevelFile.charAt(i);
		if(symbol == '\n') {
			x++;
			y = 0;
		} else {
			if('0' <= symbol & symbol <= '9') {
				desktop[x][y] = Integer.parseInt("" + symbol);
				y++;
			}
		}		
	}
	return desktop;
    }

    private String openFile(String nameFile) {
    	String textFromFile = "";
	try {
		FileReader fileReader = new FileReader(nameFile);
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		String line;
		while((line = bufferedReader.readLine()) != null) {
			textFromFile = textFromFile + line + "\n";
		}
		bufferedReader.close();
	} catch(IOException e) {
		System.out.println(e);
	}
	return textFromFile;
    }

    public boolean getStartDesktop() {
    	return startDesktop;
    }
}
